<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DarkRift.Client</name>
    </assembly>
    <members>
        <member name="T:DarkRift.Client.DarkRiftClient">
            <summary>
                The client for DarkRift connections.
            </summary>
        </member>
        <member name="E:DarkRift.Client.DarkRiftClient.MessageReceived">
            <summary>
                Event fired when a message is received.
            </summary>
        </member>
        <member name="E:DarkRift.Client.DarkRiftClient.Disconnected">
            <summary>
                Event fired when the client becomes disconnected.
            </summary>
        </member>
        <member name="P:DarkRift.Client.DarkRiftClient.ID">
            <summary>
                The ID the client has been assigned.
            </summary>
        </member>
        <member name="P:DarkRift.Client.DarkRiftClient.Connected">
            <summary>
                Returns whether or not this client is connected to the server.
            </summary>
        </member>
        <member name="P:DarkRift.Client.DarkRiftClient.RemoteEndPoint">
            <summary>
                The remote end point of the connection.
            </summary>
        </member>
        <member name="T:DarkRift.Client.DarkRiftClient.ConnectCompleteHandler">
            <summary>
                Delegate type for handling the completion of an asynchronous connect.
            </summary>
            <param name="e">The exception that occured, if any.</param>
        </member>
        <member name="F:DarkRift.Client.DarkRiftClient.connection">
            <summary>
                The connection to the remote server.
            </summary>
        </member>
        <member name="F:DarkRift.Client.DarkRiftClient.setupMutex">
            <summary>
                Mutex that is triggered once the connection is completely setup.
            </summary>
        </member>
        <member name="M:DarkRift.Client.DarkRiftClient.#ctor">
            <summary>
                Creates a new DarkRift client object.
            </summary>
        </member>
        <member name="M:DarkRift.Client.DarkRiftClient.Connect(System.Net.IPAddress,System.Int32,DarkRift.IPVersion)">
            <summary>
                Connects to a remote server.
            </summary>
            <param name="ip">The IP address of the server.</param>
            <param name="port">The port of the server.</param>
            <param name="ipVersion">The IP version to connect using.</param>
        </member>
        <member name="M:DarkRift.Client.DarkRiftClient.ConnectInBackground(System.Net.IPAddress,System.Int32,DarkRift.IPVersion,DarkRift.Client.DarkRiftClient.ConnectCompleteHandler)">
            <summary>
                Connects to a remote server in the background.
            </summary>
            <param name="ip">The IP address of the server.</param>
            <param name="port">The port of the server.</param>
            <param name="ipVersion">The IP version to connect using.</param>
            <param name="callback">The callback to invoke one the connection attempt has finished.</param>
        </member>
        <member name="M:DarkRift.Client.DarkRiftClient.SendMessage(DarkRift.Message,DarkRift.SendMode)">
            <summary>
                Sends a message to the server.
            </summary>
            <param name="message">The message to send.</param>
            <param name="sendMode">How the message should be sent.</param>
            <returns>Whether the send was successful.</returns>
        </member>
        <member name="M:DarkRift.Client.DarkRiftClient.Disconnect">
            <summary>
                Disconnects this client from the server.
            </summary>
            <returns>Whether the disconnect was successful.</returns>
        </member>
        <member name="M:DarkRift.Client.DarkRiftClient.MessageReceivedHandler(System.Byte[],DarkRift.SendMode)">
            <summary>
                Callback for when data is received.
            </summary>
            <param name="data">The data recevied.</param>
            <param name="sendMode">The SendMode used to send the data.</param>
        </member>
        <member name="M:DarkRift.Client.DarkRiftClient.HandleCommand(DarkRift.Message)">
            <summary>
                Handles a command received.
            </summary>
            <param name="message">The message that was received.</param>
        </member>
        <member name="M:DarkRift.Client.DarkRiftClient.HandleMessage(DarkRift.Message,DarkRift.SendMode)">
            <summary>
                Handles a message received.
            </summary>
            <param name="message">The message that was received.</param>
            <param name="sendMode">The send mode the emssage was received with.</param>
        </member>
        <member name="M:DarkRift.Client.DarkRiftClient.DisconnectedHandler(System.Net.Sockets.SocketError)">
            <summary>
                Called when this connection becomes disconnected.
            </summary>
            <param name="error">The error that caused the disconnection.</param>
        </member>
        <member name="M:DarkRift.Client.DarkRiftClient.Dispose">
            <summary>
                Disposes of the DarkRift client object.
            </summary>
        </member>
        <member name="M:DarkRift.Client.DarkRiftClient.Dispose(System.Boolean)">
            <summary>
                Handles disposing of the DarkRift client object.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:DarkRift.Client.DisconnectedEventArgs">
            <summary>
                Arguments for disconnection events.
            </summary>
            <remarks>
                There are currently no members to this class, it is here for future use.
            </remarks>
        </member>
        <member name="P:DarkRift.Client.DisconnectedEventArgs.LocalDisconnect">
            <summary>
                If the disconnect was requested by a call to <see cref="M:DarkRift.Client.DarkRiftClient.Disconnect"/>.
            </summary>
        </member>
        <member name="P:DarkRift.Client.DisconnectedEventArgs.Error">
            <summary>
                The error that caused the disconnect.
            </summary>
            <remarks>
                If <see cref="P:DarkRift.Client.DisconnectedEventArgs.LocalDisconnect"/> is true this field will be set to a default value and should be ignored.
            </remarks>
        </member>
        <member name="M:DarkRift.Client.DisconnectedEventArgs.#ctor(System.Boolean,System.Net.Sockets.SocketError)">
            <summary>
                Creates a new DisconnectedEventArgs object.
            </summary>
            <param name="localDisconnect">Whether it was a local call that caused the disconnection.</param>
            <param name="error">The error that caused the disconnect.</param>
        </member>
        <member name="T:DarkRift.Client.MessageReceivedEventArgs">
            <summary>
                Arguments for <see cref="E:DarkRift.Client.DarkRiftClient.MessageReceived">MessageReceived</see> events.
            </summary>
        </member>
        <member name="P:DarkRift.Client.MessageReceivedEventArgs.Message">
            <summary>
                The message received.
            </summary>
        </member>
        <member name="P:DarkRift.Client.MessageReceivedEventArgs.SendMode">
            <summary>
                The method the data was sent using.
            </summary>
        </member>
        <member name="F:DarkRift.Client.MessageReceivedEventArgs.message">
            <summary>
                The message received.
            </summary>
        </member>
        <member name="M:DarkRift.Client.MessageReceivedEventArgs.#ctor(DarkRift.Message,DarkRift.SendMode)">
            <summary>
                Creates a new args object for the <see cref="E:DarkRift.Client.DarkRiftClient.MessageReceived"/> event.
            </summary>
            <param name="message">The message received.</param>
            <param name="sendMode">The send mode the message was received with.</param>
        </member>
        <member name="M:DarkRift.Client.MessageReceivedEventArgs.GetMessage">
            <summary>
                Gets the message received.
            </summary>
            <returns>An new instance of the message received.</returns>
        </member>
        <member name="T:DarkRift.NetworkClientConnection">
            <summary>
                A connection to a remote server and handles TCP and UDP channels.
            </summary>
        </member>
        <member name="T:DarkRift.NetworkClientConnection.MessageReceivedHandler">
            <summary>
                Delegate for handling received messages.
            </summary>
            <param name="data">The data received.</param>
            <param name="mode">The <see cref="T:DarkRift.SendMode"/> used to send the data.</param>
        </member>
        <member name="T:DarkRift.NetworkClientConnection.DisconnectedHandler">
            <summary>
                Delegate for handling disconnections.
            </summary>
            <param name="socketError">The socket error that caused the disconnection.</param>
        </member>
        <member name="P:DarkRift.NetworkClientConnection.MessageReceived">
            <summary>
                The method called when a message has been received.
            </summary>
        </member>
        <member name="P:DarkRift.NetworkClientConnection.Disconnected">
            <summary>
                The method called when this connection is disconnected.
            </summary>
        </member>
        <member name="P:DarkRift.NetworkClientConnection.IsConnected">
            <summary>
                Is this client connected or not.
            </summary>
        </member>
        <member name="P:DarkRift.NetworkClientConnection.RemoteEndPoint">
            <summary>
                The IP address of the remote client.
            </summary>
        </member>
        <member name="F:DarkRift.NetworkClientConnection.tcpSocket">
            <summary>
                The socket used in TCP communication.
            </summary>
        </member>
        <member name="F:DarkRift.NetworkClientConnection.udpSocket">
            <summary>
                The socket used in UDP communication.
            </summary>
        </member>
        <member name="M:DarkRift.NetworkClientConnection.Connect(System.Net.IPAddress,System.Int32)">
            <summary>
                Connects to a remote device.
            </summary>
            <param name="ipAddress">The IP address to connect to.</param>
            <param name="port">The port to connect to.</param>
        </member>
        <member name="M:DarkRift.NetworkClientConnection.SendMessage(System.Byte[],System.Int32,System.Int32,DarkRift.SendMode)">
            <summary>
                Sends a message using the appropriate protocol.
            </summary>
            <param name="data">The array of data to send</param>
            <param name="offset">The offset of data in the array.</param>
            <param name="count">The number of bytes to send.</param>
            <param name="sendMode">How the message should be sent.</param>
            <returns>Whether the send was successful.</returns>
        </member>
        <member name="M:DarkRift.NetworkClientConnection.SendMessageReliable(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Sends a message using TCP.
            </summary>
            <param name="data">The array of data to send.</param>
            <param name="offset">The offset of the data in the array.</param>
            <param name="count">The number of bytes to send.</param>
            <returns>Whether the send was successful.</returns>
        </member>
        <member name="M:DarkRift.NetworkClientConnection.SendMessageUnreliable(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Sends a message using UDP.
            </summary>
            <param name="data">The array of data to send.</param>
            <param name="offset">The offset of the data in the array.</param>
            <param name="count">The number of bytes to send.</param>
            <returns>Whether the send was successful.</returns>
        </member>
        <member name="M:DarkRift.NetworkClientConnection.Disconnect">
            <summary>
                Disconnects this client from the remote host.
            </summary>
            <returns>Whether the disconnect was successful.</returns>
        </member>
        <member name="M:DarkRift.NetworkClientConnection.TcpHeaderReceiveCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
                Called when the 4 byte length header is received by TCP
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DarkRift.NetworkClientConnection.TcpBodyReceiveCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
                Called when the body of a TCP message is received.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DarkRift.NetworkClientConnection.UdpReceiveCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
                Called when a UDP message arrives.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DarkRift.NetworkClientConnection.TcpSendCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
                Called when a TCP send has completed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DarkRift.NetworkClientConnection.UdpSendCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
                Called when a UDP send has completed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DarkRift.NetworkClientConnection.HandleDisconnection(System.Net.Sockets.SocketError)">
            <summary>
                Called when a socket error has occured.
            </summary>
            <param name="error"></param>
        </member>
    </members>
</doc>
